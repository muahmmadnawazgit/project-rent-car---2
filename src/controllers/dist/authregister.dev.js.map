{"version":3,"sources":["authregister.js"],"names":["bcrypt","require","con","nodemailer","exports","register","req","res","body","email","name","password","mobile","Confirmpassword","verify","register_at","sendEmail","id","mail","createTransport","host","port","secure","requireTLS","auth","user","pass","mailOptions","from","to","subject","html","sendMail","err","info","console","log","query","result","length","flash","redirect","hashSync","hashpassword"],"mappings":"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","sourcesContent":["var bcrypt = require('bcryptjs');\r\nvar con = require('../db.js');\r\nvar nodemailer = require('nodemailer');\r\n\r\n\r\n\r\n//register route\r\nexports.register = (req, res) => {\r\n  const {\r\n    email,\r\n    name,\r\n    password,\r\n    mobile,\r\n    Confirmpassword,\r\n    verify,\r\n    register_at\r\n  } = req.body\r\n\r\n  function sendEmail(email, id) {\r\n    var email = email;\r\n    var id = id;\r\n    var mail = nodemailer.createTransport({\r\n      host: 'smtp.gmail.com',\r\n      port: 587,\r\n      secure: false,\r\n      requireTLS: true,\r\n      auth: {\r\n        user: 'muhammadnawaz110002@gmail.com',\r\n        pass: 'fdbtwhlfzoddxczn'\r\n      }\r\n    })\r\n    var mailOptions = {\r\n      from: 'muhammadnawaz110002@gmail.com',\r\n      to: email,\r\n      subject: 'email verification',\r\n      html: '<p>Welcome to StarShine plz verify your link <a href=\"http://localhost:3000/Verify-Email?id=' + id + '\">Verify</a></p>'\r\n    }\r\n    mail.sendMail(mailOptions, function (err, info) {\r\n      if (err) throw err;\r\n    })\r\n\r\n  }\r\n  console.log(req.body);\r\n  con.query('SELECT email,name FROM users WHERE email=? OR name=?', [email, name], async function (err, result) {\r\n    if (err) throw err;\r\n    if (result.length > 0) {\r\n      req.flash('message', 'user already exsits');\r\n      return res.redirect('/register')\r\n    } else if (password != Confirmpassword) {\r\n      req.flash('message', 'password does not match');\r\n      return res.redirect('/register')\r\n    }\r\n    const hashpassword = await bcrypt.hashSync(password, 8);\r\n    con.query('INSERT INTO users SET ?', {\r\n      name: name,\r\n      password: hashpassword,\r\n      email: email,\r\n      verify: 0\r\n    }, function (err, result) {\r\n      if (err) throw err;\r\n      con.query('SELECT * FROM users WHERE email=?', [email], function (err, result) {\r\n        if (err) throw err;\r\n        if (result.length > 0) {\r\n          sendEmail(email, result[0].id);\r\n          req.flash('message', 'Verification link has been sent Please Verify')\r\n          return res.redirect('/login');\r\n        }\r\n      })\r\n\r\n    })\r\n  })\r\n};\r\n\r\n///email verification set in routes.js \r\n///email verification set in routes.js "],"file":"authregister.dev.js"}